import { Component, Output } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

const queryExamples = new Map(
  [
    ['Count UniProt proteins', `PREFIX schema: <https://schema.org/>\nSELECT (COUNT(DISTINCT ?x) AS ?Proteins)\nWHERE {\n    GRAPH ?g {\n        ?s a schema:Protein ;\n            schema:sameAs ?x .\n    }\n}\n`],
    ['List UniProt proteins URIs', `PREFIX schema: <https://schema.org/>\nSELECT DISTINCT ?UniProtID\nWHERE {\n    GRAPH ?g {\n        ?protein a schema:Protein ;\n            schema:sameAs ?UniProtID .\n    }\n}\nOFFSET 0\nLIMIT 10\n`],
    ['Is UniProt protein in database', `PREFIX schema: <https://schema.org/>\nPREFIX idp: <https://idpcentral.org/registry/>\nSELECT ?UniProtID (MAX(?mobidb) as ?MobiDB) (MAX(?ped) as ?PED) (MAX(?disprot) as ?Disprot)\nWHERE {\n    {\n        SELECT ?UniProtID ?mobidb ?ped ?disprot\n        WHERE {\n            GRAPH ?g {\n                ?x schema:sameAs ?UniProtID .\n            }\n            BIND((?g = idp:ped) AS ?ped)\n            BIND((?g = idp:disprot) AS ?disprot)\n            BIND((?g = idp:mobidb) AS ?mobidb)\n            {\n                SELECT DISTINCT ?UniProtID\n                WHERE {\n                    ?protein a schema:Protein ;\n                        schema:sameAs ?UniProtID .\n                }\n            }\n        }\n    }\n}\nGROUP BY ?UniProtID\nOFFSET 0\nLIMIT 10\n`],
    ['Number of UniProt per database', `PREFIX schema: <https://schema.org/>\nSELECT ?graph (COUNT(DISTINCT ?UniProtID) AS ?Proteins)\nWHERE {\n    GRAPH ?graph {\n        ?s a schema:Protein ;\n            schema:sameAs ?UniProtID .\n    }\n}\nGROUP BY ?graph\n`],
    ['Registry', `PREFIX schema: <https://schema.org/>\nPREFIX idp: <https://idpcentral.org/registry/>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?UniProtID ?organismName ?taxonomy ?name ?source ?sourceID ?start ?end ?annotationName ?annotationCode\nWHERE {\n    {\n        graph idp:disprot {\n            ?protein schema:sameAs ?UniProtID ;\n                schema:hasSequenceAnnotation ?annotationID ;\n                schema:identifier ?identifier ;\n                dc:title ?source .\n            OPTIONAL { ?protein schema:name ?name }\n        }\n    } UNION {\n        graph idp:mobidb {\n            ?protein schema:sameAs ?UniProtID ;\n                schema:hasSequenceAnnotation ?annotationID ;\n                schema:identifier ?identifier ;\n                dc:title ?source .\n            OPTIONAL { ?protein schema:name ?name }\n        }\n    } UNION {\n        graph idp:ped {\n            ?collection a schema:CollectionPage ;\n                dc:title ?source ;\n                schema:mainEntity ?e ;\n                schema:identifier ?identifier .\n            ?e schema:itemListElement ?protein .\n            ?protein schema:sameAs ?UniProtID ;\n                schema:hasSequenceAnnotation ?annotationID .\n            OPTIONAL { ?protein schema:name ?name }\n        }\n    }\n    BIND(REPLACE(?identifier, "(^.+:)", "") AS ?sourceID)\n    ?annotationID schema:sequenceLocation ?sequenceLocation ;\n        schema:additionalProperty/schema:value ?annotation .\n    ?sequenceLocation schema:rangeStart ?start ;\n        schema:rangeEnd ?end .\n    ?annotation schema:name ?annotationName ;\n        schema:termCode ?annotationCode .\n    {\n        SELECT DISTINCT ?UniProtID ?organismName ?taxonomy \n        WHERE {\n            {\n                SELECT DISTINCT ?UniProtID\n                WHERE {\n                    ?protein a schema:Protein ;\n                        schema:sameAs ?UniProtID .\n                }\n                ORDER BY ?UniProtID\n                OFFSET 0\n                LIMIT 5\n            }\n            SERVICE <https://sparql.uniprot.org/sparql> {\n                ?UniProtID a up:Protein ;\n                    up:organism ?taxonomy .\n                ?taxonomy up:scientificName ?organismName .\n            }\n        }\n    }\n}\n`],
    ['Registry for UniProt', `PREFIX schema: <https://schema.org/>\nPREFIX idp: <https://idpcentral.org/registry/>\nPREFIX dc: <http://purl.org/dc/terms/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT DISTINCT ?sequenceID ?organismName ?taxonomy ?name ?source ?sourceID ?start ?end ?annotationName ?annotationCode\nWHERE {\n    {\n        graph idp:disprot {\n            ?protein schema:sameAs ?sequenceID ;\n                schema:hasSequenceAnnotation ?annotationID ;\n                schema:identifier ?identifier ;\n                dc:title ?source .\n            OPTIONAL { ?protein schema:name ?name }\n        }\n    } UNION {\n        graph idp:mobidb {\n            ?protein schema:sameAs ?sequenceID ;\n                schema:hasSequenceAnnotation ?annotationID ;\n                schema:identifier ?identifier ;\n                dc:title ?source .\n            OPTIONAL { ?protein schema:name ?name }\n        }\n    } UNION {\n        graph idp:ped {\n            ?collection a schema:CollectionPage ;\n                dc:title ?source ;\n                schema:mainEntity ?e ;\n                schema:identifier ?identifier .\n            ?e schema:itemListElement ?protein .\n            ?protein schema:sameAs ?sequenceID ;\n                schema:hasSequenceAnnotation ?annotationID .\n            OPTIONAL { ?protein schema:name ?name }\n        }\n    }\n    BIND(REPLACE(?identifier, "(^.+:)", "") AS ?sourceID)\n    ?annotationID schema:sequenceLocation ?sequenceLocation ;\n        schema:additionalProperty/schema:value ?annotation .\n    ?sequenceLocation schema:rangeStart ?start ;\n        schema:rangeEnd ?end .\n    ?annotation schema:name ?annotationName ;\n        schema:termCode ?annotationCode .\n    {\n        SELECT DISTINCT ?sequenceID ?organismName ?taxonomy \n        WHERE {\n            {\n                SELECT DISTINCT ?sequenceID\n                WHERE {\n                    ?protein a schema:Protein ;\n                        schema:sameAs ?sequenceID .\n                    BIND(REPLACE(STR(?sequenceID), "^.*/", "") AS ?identifier)\n                    FILTER(CONTAINS(?identifier, "P04637"))\n                }\n            }\n            SERVICE <https://sparql.uniprot.org/sparql> {\n                ?sequenceID a up:Protein ;\n                    up:organism ?taxonomy .\n                ?taxonomy up:scientificName ?organismName .\n            }\n        }\n    }\n}\n`],
    ['Disorder in PDB', `PREFIX schema: <https://schema.org/>\nPREFIX idp: <https://idpcentral.org/registry/>\nPREFIX up: <http://purl.uniprot.org/core/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nSELECT ?sequenceID ?identifier ?disprotIdentifier ?start ?end ?pdbInfo\nWHERE {\n    {\n        SELECT DISTINCT ?sequenceID ?disprotIdentifier ?identifier ?start ?end\n        WHERE {\n            GRAPH idp:mobidb {\n                ?protein a schema:Protein ;\n                    schema:sameAs ?sequenceID ;\n                    schema:hasSequenceAnnotation ?annotationID ;\n                    schema:identifier ?id .\n                ?annotationID schema:sequenceLocation ?sequenceLocation .\n                ?sequenceLocation schema:rangeStart ?s ;\n                    schema:rangeEnd ?e .\n                BIND(URI(?id) as ?identifier)\n                BIND(xsd:integer(?s) AS ?start)\n                BIND(xsd:integer(?e) AS ?end)\n            }\n            GRAPH idp:disprot {\n                ?x schema:sameAs ?sequenceID ;\n                    schema:hasSequenceAnnotation ?disprotAnnotationID ;\n                    schema:identifier ?dID .\n                ?disprotAnnotationID schema:sequenceLocation ?disprotSequenceLocation .\n                ?disprotSequenceLocation schema:rangeStart ?dS ;\n                    schema:rangeEnd ?dE .\n                ?disprotAnnotationID schema:additionalProperty/schema:value/schema:termCode ?term .\n                FILTER (?term = "IDPO:00076")\n                BIND(URI(?dID) as ?disprotIdentifier)\n                BIND(xsd:integer(?dS) AS ?disprotStart)\n                BIND(xsd:integer(?dE) AS ?disprotEnd)\n            }\n            FILTER (?disprotStart >= ?start && ?disprotEnd <= ?end)\n        }\n        ORDER BY ?sequenceID ?start ?end\n        offset 0\n        LIMIT 10\n    }\n    SERVICE <https://sparql.uniprot.org/sparql> {\n        ?sequenceID a up:Protein ;\n            rdfs:seeAlso ?pdb .\n        ?pdb up:database <http://purl.uniprot.org/database/PDB> ;\n            up:chainSequenceMapping ?chainSm .\n        ?chainSm up:chain ?chainsPlusRange .\n        # Extract the list of chains from the text representation.\n        BIND(STRBEFORE(?chainsPlusRange, '=') AS ?chain)\n        BIND(STRAFTER(?chainsPlusRange, '=') AS ?range)\n        BIND(xsd:integer(STRBEFORE(?range, '-')) AS ?rangeStart)\n        BIND(xsd:integer(STRAFTER(?range, '-')) AS ?rangeEnd)\n        BIND(REPLACE(STR(?sequenceID), "(^.+/)", "") AS ?sequenceIDstripped)\n        FILTER (\n            REGEX(STR(?chainSm), ?sequenceIDstripped) &&\n            (\n                ?start >= xsd:integer(?rangeStart) && ?start <= xsd:integer(?rangeEnd) ||\n                ?end >= xsd:integer(?rangeStart) && ?end <= xsd:integer(?rangeEnd) ||\n                ?start < xsd:integer(?rangeStart) && ?end > xsd:integer(?rangeEnd)\n            )\n        )\n        BIND(REPLACE(STR(?pdb), "(^.+/)", "") AS ?pdbId)\n        BIND(concat(?pdbId, '_', ?chain, ' ', ?rangeStart, '-', ?rangeEnd) AS ?pdbInfo)\n    }\n}\nGROUP BY ?sequenceID ?identifier ?disprotIdentifier ?start ?end ?pdbInfo\nORDER BY ?sequenceID ?start ?end\n`],
  ],
)

@Component({
  selector : 'app-sparql',
  templateUrl : './sparql.component.html',
  styleUrls : ['./sparql.component.scss'],
})
export class SparqlComponent {
  sparqlResults$ = new BehaviorSubject<string[][]>([]);

  @Output()
  exampleQuery: string = `SELECT * WHERE {\n  ?s ?p ?o\n} LIMIT 10`;

  inputExample(example: string) {
    this.exampleQuery = queryExamples.get(example) || '';
  }

  onSparqlResult($event: string[][]) {
    this.sparqlResults$.next($event);
  }
}
